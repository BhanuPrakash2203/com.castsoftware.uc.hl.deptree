package JS::CheckJS;

use Erreurs;

# ----------------------------- SUBDIRECTORIES----------------------------------
#                          to exclude from analysis.
# ------------------------------------------------------------------------------
my @EXT_LIB_DIRS = (
  'jquery',
  'tiny_mce',
  'webfontloader',
  'dojo',
  'angularjs',
  'jasmine',
  'dart',
  'gwt',
  'kendo',
  'jasmine',
  'backbone.marionette',
  'backbone_marionette',
  'marionette',
);

my $reg_EXT_LIB_DIRS = '(?:'.(join '|', @EXT_LIB_DIRS).(')');

sub checkExternalLibraryFromPath($) {
  my $r_filename = shift;

  if ($$r_filename =~ /[\\\/]$reg_EXT_LIB_DIRS[\\\/]/) {
    return "external library";
  }
  return undef;
}

# ----------------------------- FILES NAMES ------------------------------------
#                         to exclude from analysis.
# ------------------------------------------------------------------------------
#
sub checkExternalLibraryFromName($) {
  my $r_filename = shift;

  if ($$r_filename =~ /(?:jquery[^\\\/]*)\.js$/) {
    return "external library";
  }
  return undef;
}

# ------------------------------ WEB SITE --------------------------------------
#             whose presence in comments inside the js programme
#               indicates that the file should not be analyzed.
# ------------------------------------------------------------------------------
my @EXT_LIB_SITES = (
  'angularjs\.org',
  'code\.google\.com\/p\/swfobject',
  'menujs\.net',
  'prototypejs\.org',
  'openrico\.org',
  'script\.aculo\.us',
  'mootools\.net',
  'mochikit\.com',
  'jquery\.org\/license',
);
my $reg_EXT_LIB_SITES = '(?:'.(join '|', @EXT_LIB_SITES).(')');

# -----------------------------VARIOUS PATTERNS --------------------------------
#          whose presence in comments inside the js programme indicates
#                   that the file should not be analyzed.
# ------------------------------------------------------------------------------
my @EXT_LIB_PATTERNS = (
  'qooxdoo\.org\/license',
  'Midori JS Framework\b[^\n]*\bCopyright',
  'Ext JS\b[^\n]*\bJavaScript Library',
  'Copyright\b[^\n]*\bThe Dojo Foundation',
  'Copyright DHTMLX LTD',
  '\bMIT\s+License\b',
  'Ample SDK - JavaScript GUI Framework',
  'AccDC Object',
  'Part of AccDC',
);
my $reg_EXT_LIB_PATTERNS = '(?:'.(join '|', @EXT_LIB_PATTERNS).(')');

sub checkExternalLibraryFromContent($) {
  my $r_buffer = shift;

  if ($$r_buffer =~ /\bhttp:\/\/(?:www\.)?$reg_EXT_LIB_SITES|$reg_EXT_LIB_PATTERNS/) {
    return "external library";
  }
  return undef;
}

sub checkMinified($$) {
  my $r_buffer = shift;
  my $options = shift;

  if ( ! exists $options->{'--allow-minified'}) {
    my $nblines = () = $$r_buffer =~ /\n/sg;
    my $ratio = length ($$r_buffer) / $nblines;

    if ($ratio > 70) {
      return "minified file (ratio=$ratio)";
    }
  } 
  return undef;
}

sub CheckCodeAvailability($$$)
{
  my $r_fileName = shift;
  my $r_buffer = shift;
  my $options = shift;


  if ( ! exists $options->{'--allow-external'}) {
    my $ExtLib = checkExternalLibraryFromPath($r_fileName);
    if ($ExtLib) {
      return ($ExtLib, Erreurs::ABORT_CAUSE_EXTERNAL_LIB);
    }

    $ExtLib = checkExternalLibraryFromName($r_fileName);
    if ($ExtLib) {
      return ($ExtLib, Erreurs::ABORT_CAUSE_EXTERNAL_LIB);
    }

    $ExtLib = checkExternalLibraryFromContent($r_buffer);
    if ($ExtLib) {
      return ($ExtLib, Erreurs::ABORT_CAUSE_EXTERNAL_LIB);
    }
  }

  # evaluate the 
  # RATIO > 70 ==> minified
  #
  # pb : fichier HTML ... ==> faire le check de ratio après le strip ...
  
  if ($$r_fileName =~ /\.js$/) {
    my $res=checkMinified($r_buffer, $options);
    if ( defined $res ) {
      return ($res, Erreurs::ABORT_CAUSE_WRAPPED);
    }
  }

  # check if code was produced by coffee :
  if ($$r_buffer =~ m/\/[\/\*]\s*Generated\s+by\s+CoffeeScript/gmi) {
    return ('Generated by CoffeeScript', Erreurs::ABORT_CAUSE_GENERATED_FILE);
  }

  if ($$r_buffer =~ m/\/[\/\*]\s*Generated\s+by\s+dart2js/gmi) {
    return ('Generated by dart2js', Erreurs::ABORT_CAUSE_GENERATED_FILE);
  } 

  if ($$r_buffer =~ m/\/[\/\*]\s*Generated\b(.*)\bby\s+Nodejitsu/gmi) {
    return ('Generated by Nodejitsu', Erreurs::ABORT_CAUSE_GENERATED_FILE);
  } 
  return (undef, 0);
}

1;
